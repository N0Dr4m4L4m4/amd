-----------------------------------------------
-- Delete eventually existing objects ---------
-----------------------------------------------
DROP TRIGGER IF EXISTS trig_del_rating on video;
DROP TRIGGER IF EXISTS trig_also_del_film on film_related_person;

DROP TABLE IF EXISTS Acts;
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS video;
DROP TABLE IF EXISTS benutzer;
DROP TABLE IF EXISTS film_related_person;



-----------------------------------------------
-- Create Tables ------------------------------
-----------------------------------------------
-- Video --
CREATE TABLE video(
    title VARCHAR(256) NOT NULL,
    release_year int NOT NULL,
    genre text[],
    min_age int NOT NULL CHECK(min_age = 0 OR min_age = 6 OR min_age = 12 OR min_age = 16 OR min_age = 18),
    duration INT NOT NULL,
    episode_nr INT CHECK(episode_nr > 0),
    season_nr INT  CHECK(season_nr > 0),
    series_name text not NULL,
    PRIMARY KEY(title, release_year)
);

-- Benutzer --
CREATE table benutzer(
    name VARCHAR (256) PRIMARY KEY,
    age int NOT NULL CHECK(age > 0)
);

-- Rating --
CREATE TABLE rating(
   title VARCHAR(256) NOT NULL,
   release_year int NOT NULL,
   name VARCHAR (256) NOT NULL, --REFERENCES benutzer(id),
   rating int NOT NULL CHECK(rating BETWEEN 1 AND 5),
   PRIMARY KEY(name, title, release_year),
   CONSTRAINT fk_rating_video
      FOREIGN KEY(title, release_year) 
	      REFERENCES video(title, release_year)
	        ON DELETE CASCADE,
   CONSTRAINT fk_rating_benutzer
      FOREIGN KEY(name) 
	      REFERENCES benutzer(name)
	        ON DELETE CASCADE
);

-- Film related person --
CREATE table film_related_person(
    surname VARCHAR(256) NOT NULL,
    forname VARCHAR (256) NOT NULL,
    date_of_birth DATE,
    sex varchar(1) CHECK(sex='m' OR sex='w' OR sex='d'),
    PRIMARY KEY(surname, forname)
    --UNIQUE(surname, forname) --PRIMARY KEY automatisch UNIQUE
);

-- Acts --
CREATE TABLE Acts(
   title VARCHAR(256) NOT NULL,
   release_year int NOT NULL,
   surname VARCHAR(256) NOT NULL,
   forname VARCHAR(256) NOT NULL,
   role text[],
   PRIMARY KEY(surname, forname, title, release_year),
   CONSTRAINT fk_acts_video
      FOREIGN KEY(title, release_year) 
	      REFERENCES video(title, release_year)
	        ON DELETE CASCADE,
   CONSTRAINT fk_acts_person
      FOREIGN KEY(surname, forname) 
	      REFERENCES film_related_person(surname, forname)
	        ON DELETE CASCADE
);

-----------------------------------------------
-- Create Trigger and Trigger functions -------
-----------------------------------------------
-- delete ratings, when film gets deleted --
-- mit Hilfe ON DELETE CASCADE in foreign key constraint ist es einfacher --
-- deswegen auskommentiert --
--CREATE OR REPLACE FUNCTION del_rating() RETURNS TRIGGER AS $$
--  BEGIN
--    DELETE FROM Rating
--      WHERE release_year = old.release_year and title = old.title;
--    RETURN OLD; --OLD important here because before trigger
--  END;
--$$ LANGUAGE plpgsql;
--
--CREATE TRIGGER trig_del_rating BEFORE DELETE ON video
--  FOR EACH ROW
--    EXECUTE PROCEDURE del_rating();
-- statt dieser funktion koennte man auch ON DELETE CASCADE verwenden nach fk_constraint

-- delete film, when film related person gets deleted --
CREATE OR REPLACE FUNCTION also_del_film() RETURNS TRIGGER AS $$
  BEGIN
    DELETE FROM Video
      WHERE release_year = (select release_year from acts where acts.surname = old.surname and acts.forname = old.forname)
        AND title = (select title from acts where acts.surname = old.surname and acts.forname = old.forname);
    RETURN OLD; --OLD important here because before trigger
  END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trig_also_del_film BEFORE DELETE ON film_related_person
  FOR EACH ROW
    EXECUTE PROCEDURE del_film();

-----------------------------------------------
-- Functions ----------------------------------
-----------------------------------------------
-- Film Management ----------------------------
-- Film hinzufügen --
CREATE OR REPLACE FUNCTION insert_video(IN tit VARCHAR, IN rel INT, IN gen TEXT[], IN min INT, IN dur INT, IN epi INT, IN sea INT, IN ser TEXT) RETURNS VOID AS $$
  BEGIN
    INSERT INTO video (title, release_year, genre, min_age, duration, episode_nr, season_nr, series_name)
      VALUES(tit, rel, gen, min, dur, epi, sea, ser);
  END;
$$ LANGUAGE plpgsql;

-- Im neu hinzugefügten Film eine mitwirkende Person einfügen --
CREATE OR REPLACE FUNCTION insert_video_role(IN tit VARCHAR, IN rel INT, IN sur TEXT, IN forn TEXT, IN rol TEXT[]) RETURNS VOID AS $$
  BEGIN
    INSERT INTO acts(title,release_year,surname,forname,role) 
      VALUES(tit, rel,sur,forn,rol);
  END;
$$ LANGUAGE plpgsql;

-- check user --
CREATE OR REPLACE FUNCTION check_user(IN benutzer_name TEXT) RETURNS TEXT AS $$
  BEGIN
    IF ((select name from benutzer where name=benutzer_name) IS NULL) then
      return 'Benutzer existiert nicht';
    ELSE
      return 'Herzlich Willkommen!';
    END IF;
  END;
$$ LANGUAGE plpgsql;

-----------------------------------------------
-- Insert Dummy Data --------------------------
-----------------------------------------------
INSERT INTO film_related_person(surname, forname, date_of_birth, sex) 
  VALUES('Watson', 'Emma', '1990-04-15', 'w'),
    ('Radcliffe', 'Daniel', '1989-06-23', 'm'),
    ('Pacino', 'Al', '1940-04-25', 'm'),
    ('Hofmann', 'Luis', '1997-06-03', 'm'),
    ('Stiebitz', 'Gina', '1997-11-17', 'w'),
    ('Friese', 'Jantje', '1977-01-01', 'w'),
    ('Mustermann', 'Max', '1987-12-22', 'm'),
    ('Musterdreher', 'Rainer', '2003-02-26', 'm'),
    ('Pauke', 'Frauke', '1956-08-30', 'w'),
    ('Musterfilmerin', 'Marie', '1944-07-01', 'w');

INSERT INTO benutzer(name,age)
  VALUES('Mats',5),
    ('Axel',23),
    ('Robin',23),
    ('Sabine',55),
    ('Tina',16);

INSERT INTO video (title, release_year, genre, min_age, duration, episode_nr, season_nr, series_name)
  VALUES('Harry Potter und der Stein der Weisen',2001,'{Fantasy}',12,140, 1, NULL, 'Harry Potter'),
    ('Harry Potter und die Kammer des Schreckens',2002,'{Fantasy}',12,154, 2, NULL, 'Harry Potter'),
    ('Harry Potter und der Gefangene von Askaban',2004,'{Fantasy}',12,132, 3, NULL, 'Harry Potter'),
    ('Harry Potter und der Feuerkelch',2005,'{Fantasy}',12,118, 4, NULL, 'Harry Potter'),    
    ('Geheimnisse',2017,'{Science-Fiction,Mystery,Thriller}',12,54, 1, 1, 'Dark'),
    ('Die Reisenden',2018,'{Science-Fiction,Mystery,Thriller}',12,49, 4, 2, 'Dark'),
    ('Der Pate',1972,'{Mafia,Krimi,Drama}',18,180, 1, NULL, 'Der Pate'),
    ('Kindisch',1988,'{Kind,Fantasy,Animation}',0,67, 1, NULL, 'Kinderfilmreihe'),
    ('Musterfilm',2004,'{Action,Krimi,Drama}',18,180, 1, NULL, 'Stirb Langsam'),
    ('Romantische Episode',2019,'{Drama,Romantik,Herzschmerz}',0,128, 12, 1, 'Moderne Romanzen');

INSERT INTO rating(title,release_year,name,rating) 
  VALUES('Der Pate',1972,'Axel',4),
  ('Geheimnisse',2017,'Axel',5),
  ('Die Reisenden',2018,'Axel',5),
  ('Kindisch',1988,'Axel',1),
  ('Musterfilm',2004,'Axel',3),
  ('Harry Potter und der Stein der Weisen',2001,'Robin',3),
  ('Harry Potter und der Gefangene von Askaban',2004,'Robin',5),
  ('Musterfilm',2004,'Robin',3),
  ('Romantische Episode',2019,'Robin',2),
  ('Harry Potter und die Kammer des Schreckens',2002,'Robin',5),
  ('Romantische Episode',2019,'Sabine',5),
  ('Musterfilm',2004,'Sabine',5),
  ('Harry Potter und der Gefangene von Askaban',2004,'Sabine',1),
  ('Harry Potter und der Stein der Weisen',2001,'Sabine',2),
  ('Der Pate',1972,'Sabine',4),
  ('Harry Potter und der Stein der Weisen',2001,'Tina',1),
  ('Harry Potter und die Kammer des Schreckens',2002,'Tina',4),
  ('Harry Potter und der Gefangene von Askaban',2004,'Tina',2),
  ('Harry Potter und der Feuerkelch',2005,'Tina',1),
  ('Geheimnisse',2017,'Tina',3),
  ('Die Reisenden',2018,'Tina',2),
  ('Der Pate',1972,'Tina',4),
  ('Kindisch',1988,'Tina',5),
  ('Musterfilm',2004,'Tina',4),
  ('Romantische Episode',2019,'Tina',1);

INSERT INTO acts(title,release_year,surname,forname,role) 
  VALUES('Harry Potter und der Stein der Weisen',2001, 'Watson', 'Emma', '{Schauspieler}'),
    ('Harry Potter und die Kammer des Schreckens',2002, 'Watson', 'Emma', '{Schauspieler}'),
    ('Harry Potter und der Gefangene von Askaban',2004, 'Watson', 'Emma', '{Schauspieler}'),
    ('Harry Potter und der Feuerkelch',2005, 'Watson', 'Emma', '{Schauspieler}'),
    ('Harry Potter und der Stein der Weisen',2001, 'Radcliffe', 'Daniel', '{Schauspieler}'),
    ('Harry Potter und die Kammer des Schreckens',2002, 'Radcliffe', 'Daniel', '{Schauspieler}'),
    ('Harry Potter und der Gefangene von Askaban',2004, 'Radcliffe', 'Daniel', '{Schauspieler}'),
    ('Harry Potter und der Feuerkelch',2005, 'Radcliffe', 'Daniel', '{Schauspieler}'),
    ('Geheimnisse',2017, 'Hofmann', 'Luis', '{Schauspieler}'),
    ('Die Reisenden',2018, 'Hofmann', 'Luis', '{Schauspieler}'),
    ('Geheimnisse',2017, 'Stiebitz', 'Gina', '{Schauspieler}'),
    ('Die Reisenden',2018, 'Stiebitz', 'Gina', '{Schauspieler}'),
    ('Geheimnisse',2017, 'Friese', 'Jantje', '{Drehbuchautor,Produzent}'),
    ('Die Reisenden',2018, 'Friese', 'Jantje', '{Drehbuchautor,Produzent}'),
    ('Der Pate',1972, 'Pacino', 'Al', '{Schauspieler,Regisseur,Produzent}'),
    ('Die Reisenden',2018, 'Mustermann', 'Max', '{Schauspieler}'),
    ('Musterfilm',2004, 'Mustermann', 'Max', '{Schauspieler}'),
    ('Geheimnisse',2017, 'Mustermann', 'Max', '{Schauspieler}'),
    ('Kindisch',1988, 'Musterdreher', 'Rainer', '{Kameramann,Schauspieler}'),
    ('Geheimnisse',2017, 'Musterdreher', 'Rainer', '{Kameramann}'),
    ('Romantische Episode',2019, 'Musterdreher', 'Rainer', '{Kameramann}'),
    ('Kindisch',1988,'Pauke','Frauke', '{Schauspieler}'),
    ('Der Pate',1972,'Pauke','Frauke', '{Schauspieler}'),
    ('Romantische Episode',2019,'Pauke','Frauke', '{Schauspieler}'),
    ('Kindisch',1988, 'Hofmann', 'Luis', '{Schauspieler}'),
    ('Musterfilm',2004, 'Hofmann', 'Luis', '{Schauspieler}'),
    ('Romantische Episode',2019, 'Hofmann', 'Luis', '{Schauspieler}'),
    ('Der Pate',1972,'Musterfilmerin','Marie', '{Produzent,Kameramann}'),
    ('Musterfilm',2004,'Musterfilmerin','Marie', '{Kameramann}'),
    ('Die Reisenden',2018,'Musterfilmerin','Marie', '{Kameramann}');

-----------------------------------------------
-- Testing ------------------------------------
-----------------------------------------------
-- delete film, --
-- then ratings in rating should be deleted too --
--delete from video where title='Harry Potter und der Stein der Weisen' and release_year = 2001;
--select * from video;
--select * from rating;

-- delete film rating, --
-- then film in video should not be deleted --
--delete from rating where title='Harry Potter und der Stein der Weisen' and release_year = 2001;
--select * from video;
--select * from rating;

-- delete film related person, --
-- then role in acts and film in video should be deleted too --
--delete from film_related_person where surname='Watson';
--select * from film_related_person;
--select * from acts;
--select * from video;

-- Anzeige von allen Filmen mit Genre Fantasy --
-- then sollten auch alle angezeigt werden mit Fantasy --
--select * from video where 'Fantasy' = ANY(genre)

-- Aufruf Funktion zum Hinzufügen eines Films samt im Film mitwikrender Person --
-- then sollte Eintrag eingefügt werden
--select insert_video('Harry Potter und der Test',2001,'{Fantasy,Abenteuer}',12,140, 1, NULL, 'Harry Potter');
--select insert_video_role('Harry Potter und der Test',2001,'Watson','Emma', '{Schauspieler, Statist}');

-- Check User login --
--select * from check_user('Axel');
